{"version":3,"file":"main.d2bdbb855268e721f594.hot-update.js","mappings":"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","sources":["webpack://lemonade-zk/./src/game/game.js","webpack://lemonade-zk/webpack/runtime/getFullHash"],"sourcesContent":["class LemonadeStand {\n    constructor() {\n        this.assets = 2.00; // Starting money\n        this.day = 1;\n        this.weather = {\n            SUNNY: 'SUNNY',\n            CLOUDY: 'CLOUDY',\n            HOT_AND_DRY: 'HOT_AND_DRY'\n        };\n        this.currentWeather = this.weather.SUNNY;\n        this.weatherProbabilities = {\n            [this.weather.SUNNY]: 0.6,\n            [this.weather.CLOUDY]: 0.2,\n            [this.weather.HOT_AND_DRY]: 0.2\n        };\n        this.costPerGlass = 0.02; // $0.02 per glass to make\n        this.costPerSign = 0.15; // $0.15 per advertising sign\n        this.gameState = {\n            SETUP: 'SETUP',\n            RUNNING: 'RUNNING',\n            RESULTS: 'RESULTS',\n            GAME_OVER: 'GAME_OVER',\n            WIN: 'WIN',\n            WIN_CONFIRMED: 'WIN_CONFIRMED'  // New state for confirmed win\n        };\n        this.currentState = this.gameState.SETUP;\n        this.displayElement = document.getElementById('game-display');\n        this.inputElement = document.getElementById('player-input');\n        \n        // Game statistics\n        this.totalProfit = 0;\n        this.bestDayProfit = 0;\n        this.totalGlassesSold = 0;\n        this.bankruptcyDays = 0;\n        this.glasses = 0;\n        this.signs = 0;\n        this.price = 0;\n        \n        // Remove global event listener before adding a new one\n        document.removeEventListener('keypress', this.handleGlobalKeypress);\n        \n        this.setupEventListeners();\n        this.startDay();\n    }\n\n    setupEventListeners() {\n        // Store the bound function so we can remove it later\n        this.handleGlobalKeypress = (e) => {\n            if (e.key === 'Enter') {\n                if (this.currentState === this.gameState.WIN) {\n                    // First Enter press just changes state\n                    this.currentState = this.gameState.WIN_CONFIRMED;\n                    this.displayElement.textContent += '\\n\\nPress Enter again to start a new game...';\n                } else if (this.currentState === this.gameState.WIN_CONFIRMED) {\n                    // Second Enter press starts new game\n                    window.game = new LemonadeStand();\n                } else if (this.currentState === this.gameState.GAME_OVER) {\n                    if (this.bankruptcyDays >= 2) {\n                        // Start a new game after double bankruptcy\n                        window.game = new LemonadeStand();\n                    } else {\n                        console.log('Starting next day');\n                        this.day++;\n                        this.currentState = this.gameState.SETUP;\n                        this.startDay();\n                    }\n                }\n            }\n        };\n\n        // Add the global keypress listener\n        document.addEventListener('keypress', this.handleGlobalKeypress);\n\n        // Clear any existing submitInput handler\n        if (window.submitInput) {\n            delete window.submitInput;\n        }\n\n        // Set up the new submitInput handler\n        window.submitInput = () => {\n            console.log('Submit clicked, current state:', this.currentState);\n            const inputValue = this.inputElement.value.trim();\n            console.log('Input value:', inputValue);\n            \n            const input = parseInt(inputValue);\n            console.log('Parsed input:', input);\n            \n            if (isNaN(input) || input < 0) {\n                alert('Please enter a valid positive number');\n                return;\n            }\n            \n            switch (this.currentState) {\n                case this.gameState.SETUP:\n                    if (input * this.costPerGlass > this.assets) {\n                        alert('You cannot afford that many glasses!');\n                        return;\n                    }\n                    this.glasses = input;\n                    this.currentState = this.gameState.RUNNING;\n                    this.displayGameState();\n                    break;\n                    \n                case this.gameState.RUNNING:\n                    const totalCost = (this.glasses * this.costPerGlass) + (input * this.costPerSign);\n                    if (totalCost > this.assets) {\n                        alert('You cannot afford that many signs!');\n                        return;\n                    }\n                    this.signs = input;\n                    this.currentState = this.gameState.RESULTS;\n                    this.displayGameState();\n                    break;\n                    \n                case this.gameState.RESULTS:\n                    console.log('Processing price input:', input);\n                    if (input <= 0) {\n                        alert('Price must be greater than 0 cents!');\n                        return;\n                    }\n                    this.price = input / 100;\n                    console.log('Price set to:', this.price);\n                    this.runSimulation();\n                    break;\n            }\n            \n            this.inputElement.value = '';\n        };\n        \n        // Remove any existing keypress listener from the input\n        this.inputElement.removeEventListener('keypress', this.handleInputKeypress);\n        \n        // Add the new keypress listener to the input\n        this.handleInputKeypress = (e) => {\n            if (e.key === 'Enter') {\n                e.preventDefault();\n                window.submitInput();\n            }\n        };\n        this.inputElement.addEventListener('keypress', this.handleInputKeypress);\n    }\n\n    startDay() {\n        // Reset from bankruptcy if needed\n        if (this.bankruptcyDays > 0 && this.bankruptcyDays < 2) {\n            this.assets = 2.00;\n        }\n        \n        // First two days are always sunny (like the original game)\n        if (this.day <= 2) {\n            this.currentWeather = this.weather.SUNNY;\n        } else {\n            this.currentWeather = this.generateWeather();\n        }\n        \n        this.displayGameState();\n    }\n\n    generateWeather() {\n        const rand = Math.random();\n        let cumProb = 0;\n        for (const [weather, prob] of Object.entries(this.weatherProbabilities)) {\n            cumProb += prob;\n            if (rand < cumProb) return weather;\n        }\n        return this.weather.SUNNY;\n    }\n\n    calculateDemand(glasses, signs, price) {\n        let n1 = price < 10 ? 54 - 2.4 * price : 3000 / (price * price);\n        let r1 = this.currentWeather === this.weather.HOT_AND_DRY ? 2 : 1;\n        let signEffect = 2 - Math.exp(-0.5 * signs);\n        \n        let demand = Math.floor(r1 * n1 * signEffect);\n        return Math.min(demand, glasses);\n    }\n\n    displayGameState() {\n        let display = '';\n        \n        switch (this.currentState) {\n            case this.gameState.SETUP:\n                display = `\n*** LEMONADE STAND ***\n\nDAY ${this.day}\nASSETS: $${this.assets.toFixed(2)}\n\nWEATHER REPORT: ${this.currentWeather.replace(/_/g, ' ')}\n\nCOST OF LEMONADE: $${this.costPerGlass.toFixed(2)}/GLASS\nCOST OF SIGNS: $${this.costPerSign.toFixed(2)}/SIGN\n\nGAME PROGRESS:\nTotal Profit: $${this.totalProfit.toFixed(2)}\nBest Day: $${this.bestDayProfit.toFixed(2)}\nTotal Sales: ${this.totalGlassesSold} glasses\n\nHOW MANY GLASSES OF LEMONADE DO YOU WISH TO MAKE?`;\n                break;\n                \n            case this.gameState.RUNNING:\n                display = `\nASSETS: $${this.assets.toFixed(2)}\nGLASSES TO MAKE: ${this.glasses}\n\nHOW MANY ADVERTISING SIGNS DO YOU WANT TO MAKE?`;\n                break;\n                \n            case this.gameState.RESULTS:\n                display = `\nASSETS: $${this.assets.toFixed(2)}\nGLASSES TO MAKE: ${this.glasses}\nSIGNS TO MAKE: ${this.signs}\n\nHOW MUCH DO YOU WISH TO CHARGE FOR LEMONADE (CENTS)?`;\n                break;\n\n            case this.gameState.WIN:\n                display = `\n*** CONGRATULATIONS! ***\n\nYou've mastered the art of running a lemonade stand!\n\nFINAL STATISTICS:\n----------------\nDays in Business:   ${this.day}\nFinal Assets:       $${this.assets.toFixed(2)}\nTotal Profit:       $${this.totalProfit.toFixed(2)}\nBest Day Profit:    $${this.bestDayProfit.toFixed(2)}\nTotal Sales:        ${this.totalGlassesSold} glasses\n\n${this.assets >= 100.00 ? \"You reached $100 in assets!\" : \"You survived 30 days!\"}\n\nPress Enter to start a new game...`;\n                break;\n        }\n        \n        this.displayElement.textContent = display;\n        this.inputElement.value = '';\n        this.inputElement.focus();\n    }\n\n    runSimulation() {\n        const startingAssets = this.assets;\n        const lemonadeCost = this.glasses * this.costPerGlass;\n        const signsCost = this.signs * this.costPerSign;\n        const totalExpenses = lemonadeCost + signsCost;\n        const glassesSold = this.calculateDemand(this.glasses, this.signs, this.price);\n        const revenue = glassesSold * this.price;\n        const profit = revenue - totalExpenses;\n        const unsoldGlasses = this.glasses - glassesSold;\n        \n        // Update game statistics\n        this.totalProfit += profit;\n        this.bestDayProfit = Math.max(this.bestDayProfit, profit);\n        this.totalGlassesSold += glassesSold;\n        this.assets += profit;\n\n        let resultDisplay = `\n*** DAY ${this.day} RESULTS ***\n\nDETAILED FINANCIAL REPORT:\n------------------------\nStarting Assets:     $${startingAssets.toFixed(2)}\n\nEXPENSES:\n  Lemonade (${this.glasses} glasses @ $${this.costPerGlass.toFixed(2)}/glass):  $${lemonadeCost.toFixed(2)}\n  Signs (${this.signs} signs @ $${this.costPerSign.toFixed(2)}/sign):      $${signsCost.toFixed(2)}\n  Total Expenses:    $${totalExpenses.toFixed(2)}\n\nSALES:\n  Price per Glass:   $${this.price.toFixed(2)}\n  Glasses Made:      ${this.glasses}\n  Glasses Sold:      ${glassesSold}\n  Glasses Unsold:    ${unsoldGlasses}\n  \nREVENUE:\n  Gross Revenue:     $${revenue.toFixed(2)}\n  Net Profit:        $${profit.toFixed(2)}\n\nSUMMARY:\n  Starting Assets:   $${startingAssets.toFixed(2)}\n  Change in Assets:  ${profit >= 0 ? '+' : ''}$${profit.toFixed(2)}\n  Ending Assets:     $${this.assets.toFixed(2)}\n\nGAME STATISTICS:\n  Total Days:        ${this.day}\n  Total Profit:      $${this.totalProfit.toFixed(2)}\n  Best Day Profit:   $${this.bestDayProfit.toFixed(2)}\n  Total Glasses Sold: ${this.totalGlassesSold}\n`;\n\n        // Check win/lose conditions\n        if (this.assets <= 0) {\n            this.bankruptcyDays++;\n            if (this.bankruptcyDays >= 2) {\n                this.currentState = this.gameState.GAME_OVER;\n                resultDisplay += '\\n\\nGAME OVER! You went bankrupt twice. Final Score: $' + this.totalProfit.toFixed(2);\n                resultDisplay += '\\n\\nPress Enter to start a new game...';\n            } else {\n                resultDisplay += '\\n\\nBANKRUPTCY! But you get another chance with $2.00';\n                this.assets = 2.00;\n                this.currentState = this.gameState.GAME_OVER;\n                resultDisplay += '\\n\\nPress Enter to continue with $2.00...';\n            }\n        } else if (this.assets >= 100.00 || this.day >= 30) {\n            this.currentState = this.gameState.WIN;\n            resultDisplay = `\n*** CONGRATULATIONS! ***\n\nYou've mastered the art of running a lemonade stand!\n\nFINAL STATISTICS:\n----------------\nDays in Business:   ${this.day}\nFinal Assets:       $${this.assets.toFixed(2)}\nTotal Profit:       $${this.totalProfit.toFixed(2)}\nBest Day Profit:    $${this.bestDayProfit.toFixed(2)}\nTotal Sales:        ${this.totalGlassesSold} glasses\n\n${this.assets >= 100.00 ? \"You reached $100 in assets!\" : \"You survived 30 days!\"}\n\nPress Enter to start a new game...`;\n        } else {\n            this.currentState = this.gameState.GAME_OVER;\n            resultDisplay += '\\n\\nPress Enter to continue to Day ' + (this.day + 1);\n        }\n        \n        this.displayElement.textContent = resultDisplay;\n        this.inputElement.value = '';\n    }\n}\n\n// Export the LemonadeStand class\nwindow.LemonadeStand = LemonadeStand;\n\n// Remove the automatic initialization since we're handling it in HTML\n// window.onload = () => {\n//     window.game = new LemonadeStand();\n//     window.gameLoaded = true;\n// }; ","__webpack_require__.h = () => (\"bfe8da5784d2751f0297\")"],"names":["LemonadeStand","_classCallCheck","assets","day","weather","SUNNY","CLOUDY","HOT_AND_DRY","currentWeather","weatherProbabilities","_defineProperty","costPerGlass","costPerSign","gameState","SETUP","RUNNING","RESULTS","GAME_OVER","WIN","WIN_CONFIRMED","currentState","displayElement","document","getElementById","inputElement","totalProfit","bestDayProfit","totalGlassesSold","bankruptcyDays","glasses","signs","price","removeEventListener","handleGlobalKeypress","setupEventListeners","startDay","_createClass","key","value","_this","e","textContent","window","game","console","log","addEventListener","submitInput","inputValue","trim","input","parseInt","isNaN","alert","displayGameState","totalCost","runSimulation","handleInputKeypress","preventDefault","generateWeather","rand","Math","random","cumProb","_i","_Object$entries","Object","entries","length","_Object$entries$_i","_slicedToArray","prob","calculateDemand","n1","r1","signEffect","exp","demand","floor","min","display","concat","toFixed","replace","focus","startingAssets","lemonadeCost","signsCost","totalExpenses","glassesSold","revenue","profit","unsoldGlasses","max","resultDisplay"],"sourceRoot":""}