/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/game/game.js":
/*!**************************!*\
  !*** ./src/game/game.js ***!
  \**************************/
/***/ (() => {

eval("function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar LemonadeStand = /*#__PURE__*/function () {\n  function LemonadeStand() {\n    _classCallCheck(this, LemonadeStand);\n    this.assets = 2.00; // Starting money\n    this.day = 1;\n    this.weather = {\n      SUNNY: 'SUNNY',\n      CLOUDY: 'CLOUDY',\n      HOT_AND_DRY: 'HOT_AND_DRY'\n    };\n    this.currentWeather = this.weather.SUNNY;\n    this.weatherProbabilities = _defineProperty(_defineProperty(_defineProperty({}, this.weather.SUNNY, 0.6), this.weather.CLOUDY, 0.2), this.weather.HOT_AND_DRY, 0.2);\n    this.costPerGlass = 0.02; // $0.02 per glass to make\n    this.costPerSign = 0.15; // $0.15 per advertising sign\n    this.gameState = {\n      SETUP: 'SETUP',\n      RUNNING: 'RUNNING',\n      RESULTS: 'RESULTS',\n      GAME_OVER: 'GAME_OVER'\n    };\n    this.currentState = this.gameState.SETUP;\n    this.displayElement = document.getElementById('game-display');\n    this.inputElement = document.getElementById('player-input');\n\n    // Initialize game variables\n    this.glasses = 0;\n    this.signs = 0;\n    this.price = 0;\n    this.setupEventListeners();\n    this.startDay();\n  }\n  return _createClass(LemonadeStand, [{\n    key: \"setupEventListeners\",\n    value: function setupEventListeners() {\n      var _this = this;\n      window.submitInput = function () {\n        console.log('Submit clicked, current state:', _this.currentState);\n        var inputValue = _this.inputElement.value;\n        console.log('Input value:', inputValue);\n        var input = parseInt(inputValue);\n        console.log('Parsed input:', input);\n        if (isNaN(input) || input < 0) {\n          alert('Please enter a valid positive number');\n          return;\n        }\n        switch (_this.currentState) {\n          case _this.gameState.SETUP:\n            if (input * _this.costPerGlass > _this.assets) {\n              alert('You cannot afford that many glasses!');\n              return;\n            }\n            _this.glasses = input;\n            _this.currentState = _this.gameState.RUNNING;\n            break;\n          case _this.gameState.RUNNING:\n            var totalCost = _this.glasses * _this.costPerGlass + input * _this.costPerSign;\n            if (totalCost > _this.assets) {\n              alert('You cannot afford that many signs!');\n              return;\n            }\n            _this.signs = input;\n            _this.currentState = _this.gameState.RESULTS;\n            break;\n          case _this.gameState.RESULTS:\n            console.log('Processing price input:', input);\n            if (input <= 0) {\n              alert('Price must be greater than 0 cents!');\n              return;\n            }\n            _this.price = input / 100;\n            console.log('Price set to:', _this.price);\n            _this.runSimulation();\n            console.log('After simulation, state:', _this.currentState);\n            return;\n        }\n        _this.inputElement.value = '';\n        _this.displayGameState();\n      };\n      this.inputElement.addEventListener('keypress', function (e) {\n        if (e.key === 'Enter') {\n          e.preventDefault();\n          window.submitInput();\n        }\n      });\n      document.addEventListener('keypress', function (e) {\n        if (e.key === 'Enter' && _this.currentState === _this.gameState.GAME_OVER) {\n          _this.day++;\n          _this.currentState = _this.gameState.SETUP;\n          _this.startDay();\n        }\n      });\n    }\n  }, {\n    key: \"startDay\",\n    value: function startDay() {\n      if (this.day <= 2) {\n        this.currentWeather = this.weather.SUNNY;\n      } else {\n        this.currentWeather = this.generateWeather();\n      }\n      this.displayGameState();\n    }\n  }, {\n    key: \"generateWeather\",\n    value: function generateWeather() {\n      var rand = Math.random();\n      var cumProb = 0;\n      for (var _i = 0, _Object$entries = Object.entries(this.weatherProbabilities); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n          weather = _Object$entries$_i[0],\n          prob = _Object$entries$_i[1];\n        cumProb += prob;\n        if (rand < cumProb) return weather;\n      }\n      return this.weather.SUNNY;\n    }\n  }, {\n    key: \"calculateDemand\",\n    value: function calculateDemand(glasses, signs, price) {\n      var n1 = price < 10 ? 54 - 2.4 * price : 3000 / (price * price);\n      var r1 = this.currentWeather === this.weather.HOT_AND_DRY ? 2 : 1;\n      var signEffect = 2 - Math.exp(-0.5 * signs);\n      var demand = Math.floor(r1 * n1 * signEffect);\n      return Math.min(demand, glasses);\n    }\n  }, {\n    key: \"displayGameState\",\n    value: function displayGameState() {\n      var display = '';\n      switch (this.currentState) {\n        case this.gameState.SETUP:\n          display = \"\\n*** LEMONADE STAND ***\\n\\nDAY \".concat(this.day, \"\\nASSETS: $\").concat(this.assets.toFixed(2), \"\\n\\nWEATHER REPORT: \").concat(this.currentWeather.replace(/_/g, ' '), \"\\n\\nCOST OF LEMONADE: $\").concat(this.costPerGlass.toFixed(2), \"/GLASS\\nCOST OF SIGNS: $\").concat(this.costPerSign.toFixed(2), \"/SIGN\\n\\nHOW MANY GLASSES OF LEMONADE DO YOU WISH TO MAKE?\");\n          break;\n        case this.gameState.RUNNING:\n          display = \"\\nASSETS: $\".concat(this.assets.toFixed(2), \"\\nGLASSES TO MAKE: \").concat(this.glasses, \"\\n\\nHOW MANY ADVERTISING SIGNS DO YOU WANT TO MAKE?\");\n          break;\n        case this.gameState.RESULTS:\n          display = \"\\nASSETS: $\".concat(this.assets.toFixed(2), \"\\nGLASSES TO MAKE: \").concat(this.glasses, \"\\nSIGNS TO MAKE: \").concat(this.signs, \"\\n\\nHOW MUCH DO YOU WISH TO CHARGE FOR LEMONADE (CENTS)?\");\n          break;\n      }\n      this.displayElement.textContent = display;\n      this.inputElement.value = '';\n      this.inputElement.focus();\n    }\n  }, {\n    key: \"runSimulation\",\n    value: function runSimulation() {\n      console.log('Running simulation with:', {\n        glasses: this.glasses,\n        signs: this.signs,\n        price: this.price\n      });\n      var expenses = this.glasses * this.costPerGlass + this.signs * this.costPerSign;\n      var glassesSold = this.calculateDemand(this.glasses, this.signs, this.price);\n      var revenue = glassesSold * this.price;\n      var profit = revenue - expenses;\n      this.assets += profit;\n      var resultDisplay = \"\\n*** DAY \".concat(this.day, \" RESULTS ***\\n\\nGLASSES MADE: \").concat(this.glasses, \"\\nSIGNS MADE: \").concat(this.signs, \"\\nPRICE PER GLASS: $\").concat(this.price.toFixed(2), \"\\n\\nGLASSES SOLD: \").concat(glassesSold, \"\\nREVENUE: $\").concat(revenue.toFixed(2), \"\\nEXPENSES: $\").concat(expenses.toFixed(2), \"\\nPROFIT: $\").concat(profit.toFixed(2), \"\\n\\nNEW ASSETS: $\").concat(this.assets.toFixed(2), \"\\n\\nPress Enter to continue...\");\n      if (this.assets <= 0) {\n        this.currentState = this.gameState.GAME_OVER;\n        resultDisplay += '\\n\\nGAME OVER! You ran out of money!';\n      } else {\n        this.currentState = this.gameState.GAME_OVER;\n      }\n      console.log('Setting display to results');\n      this.displayElement.textContent = resultDisplay;\n      this.inputElement.value = '';\n    }\n  }]);\n}(); // Start the game when the page loads\nwindow.onload = function () {\n  window.game = new LemonadeStand();\n};\n\n//# sourceURL=webpack://lemonade-zk/./src/game/game.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/game/game.js"]();
/******/ 	
/******/ })()
;