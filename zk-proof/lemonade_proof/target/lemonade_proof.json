{"noir_version":"1.0.0-beta.4+3a5a15ac70e52b4e67edc69e8aa5ad7780523f87","hash":"12661606755607586865","abi":{"parameters":[{"name":"previous_state","type":{"kind":"struct","path":"GameState","fields":[{"name":"current_assets","type":{"kind":"field"}},{"name":"total_profit","type":{"kind":"field"}},{"name":"day_count","type":{"kind":"field"}},{"name":"best_day_profit","type":{"kind":"field"}},{"name":"total_glasses_sold","type":{"kind":"field"}},{"name":"bankruptcy_count","type":{"kind":"field"}}]},"visibility":"private"},{"name":"final_state","type":{"kind":"struct","path":"GameState","fields":[{"name":"current_assets","type":{"kind":"field"}},{"name":"total_profit","type":{"kind":"field"}},{"name":"day_count","type":{"kind":"field"}},{"name":"best_day_profit","type":{"kind":"field"}},{"name":"total_glasses_sold","type":{"kind":"field"}},{"name":"bankruptcy_count","type":{"kind":"field"}}]},"visibility":"private"},{"name":"day_number","type":{"kind":"field"},"visibility":"private"},{"name":"glasses_made","type":{"kind":"field"},"visibility":"private"},{"name":"signs_made","type":{"kind":"field"},"visibility":"private"},{"name":"price","type":{"kind":"field"},"visibility":"private"},{"name":"weather","type":{"kind":"field"},"visibility":"private"},{"name":"glasses_sold","type":{"kind":"field"},"visibility":"private"},{"name":"random_factor","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"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","debug_symbols":"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","file_map":{"50":{"source":"// Constants for game mechanics\nglobal COST_PER_GLASS: Field = 2; // $0.02 represented as 2 cents\nglobal COST_PER_SIGN: Field = 15;  // $0.15 represented as 15 cents\nglobal STARTING_ASSETS: Field = 200; // $2.00 represented as 200 cents\n\n// Weather multipliers (as percentages)\nglobal WEATHER_HOT_AND_DRY: Field = 150; // 1.5x\nglobal WEATHER_SUNNY: Field = 100; // 1.0x\nglobal WEATHER_CLOUDY: Field = 40; // 0.4x\n\nstruct GameState {\n    current_assets: Field,    // Current money in cents\n    total_profit: Field,      // Total profit in cents\n    day_count: Field,         // Number of days played\n    best_day_profit: Field,   // Best single day profit in cents\n    total_glasses_sold: Field, // Total glasses sold\n    bankruptcy_count: Field    // Number of times gone bankrupt\n}\n\n// Fixed-point log2 approximation for price scaling\n// Input and output are multiplied by 100 for 2 decimal precision\nfn log2_fixed(x: Field) -> Field {\n    // Lookup table for log2 values from $0.01 to $5.00\n    // Values are multiplied by 100 for 2 decimal precision\n    let x_int = x as u64;\n    \n    // Very low prices ($0.01 - $0.10)\n    if x_int <= 1 { -664 as Field }        // log2(0.01) ~= -6.64\n    else if x_int <= 2 { -564 as Field }   // log2(0.02) ~= -5.64\n    else if x_int <= 5 { -432 as Field }   // log2(0.05) ~= -4.32\n    else if x_int <= 10 { -332 as Field }  // log2(0.10) ~= -3.32\n    \n    // Low prices ($0.11 - $0.50)\n    else if x_int <= 15 { -274 as Field }  // log2(0.15) ~= -2.74\n    else if x_int <= 20 { -232 as Field }  // log2(0.20) ~= -2.32\n    else if x_int <= 25 { -200 as Field }  // log2(0.25) ~= -2.00\n    else if x_int <= 30 { -174 as Field }  // log2(0.30) ~= -1.74\n    else if x_int <= 40 { -132 as Field }  // log2(0.40) ~= -1.32\n    else if x_int <= 50 { -100 as Field }  // log2(0.50) ~= -1.00\n    \n    // Medium prices ($0.51 - $2.00)\n    else if x_int <= 75 { -42 as Field }   // log2(0.75) ~= -0.42\n    else if x_int <= 100 { 0 as Field }    // log2(1.00) = 0\n    else if x_int <= 125 { 32 as Field }   // log2(1.25) ~= 0.32\n    else if x_int <= 150 { 58 as Field }   // log2(1.50) ~= 0.58\n    else if x_int <= 175 { 81 as Field }   // log2(1.75) ~= 0.81\n    else if x_int <= 200 { 100 as Field }  // log2(2.00) = 1.00\n    \n    // High prices ($2.01 - $5.00)\n    else if x_int <= 250 { 132 as Field }  // log2(2.50) ~= 1.32\n    else if x_int <= 300 { 158 as Field }  // log2(3.00) ~= 1.58\n    else if x_int <= 350 { 181 as Field }  // log2(3.50) ~= 1.81\n    else if x_int <= 400 { 200 as Field }  // log2(4.00) = 2.00\n    else if x_int <= 450 { 217 as Field }  // log2(4.50) ~= 2.17\n    else if x_int <= 500 { 232 as Field }  // log2(5.00) ~= 2.32\n    \n    // Prices above $5.00\n    else { (232 as Field) + ((x_int as Field - 500 as Field) / 100 as Field) } // Approximate for higher prices\n}\n\nfn main(\n    previous_state: GameState,  // Previous day's verified state\n    final_state: GameState,     // Today's final state\n    day_number: Field,          // Current day number\n    glasses_made: Field,        // Number of glasses made\n    signs_made: Field,          // Number of signs made\n    price: Field,              // Price per glass in cents\n    weather: Field,            // Weather condition (0=cloudy, 1=sunny, 2=hot)\n    glasses_sold: Field,       // Number of glasses sold\n    random_factor: Field       // Random demand factor (60-140%)\n) {\n    // Verify day number is valid\n    assert(day_number as u64 > 0);\n    assert(day_number as u64 <= 30);\n    \n    // Verify weather is valid (0-2)\n    let weather_valid = (weather as u64 >= 0) & (weather as u64 <= 2);\n    assert(weather_valid);\n    \n    // Verify random factor is valid (60-140%)\n    let random_valid = (random_factor as u64 >= 60) & (random_factor as u64 <= 140);\n    assert(random_valid);\n    \n    // Calculate costs\n    let lemonade_cost = glasses_made * COST_PER_GLASS;\n    let sign_cost = signs_made * COST_PER_SIGN;\n    let total_cost = lemonade_cost + sign_cost;\n    \n    // Verify player had enough money\n    let assets_sufficient = previous_state.current_assets as u64 >= total_cost as u64;\n    assert(assets_sufficient);\n    \n    // Calculate expected demand based on price\n    let weather_multiplier = if weather as u64 == 0 { \n        WEATHER_CLOUDY \n    } else if weather as u64 == 1 { \n        WEATHER_SUNNY \n    } else { \n        WEATHER_HOT_AND_DRY \n    };\n    \n    let base_demand = if price as u64 < 25 {\n        // For prices under $0.25, use linear demand\n        let demand_valid = (30 * 100) as u64 >= (120 * price) as u64; // Ensure no negative results\n        assert(demand_valid);\n        30 - ((price * 120) / 100)\n    } else {\n        // For higher prices, use logarithmic falloff\n        let price_factor = price / 25; // Normalize to $0.25 units\n        30 / (1 + log2_fixed(price_factor))\n    };\n    \n    // Calculate sign effect\n    let sign_effect = if signs_made as u64 > 0 {\n        // Progressive bonus based on number of signs\n        let sign_bonus = if signs_made as u64 <= 2 { 15 }\n        else if signs_made as u64 <= 4 { 25 }\n        else if signs_made as u64 <= 8 { 35 }\n        else { 40 };\n        \n        base_demand * sign_bonus / 100\n    } else {\n        0\n    };\n    \n    // Calculate total expected demand\n    let expected_demand = ((base_demand + sign_effect) * weather_multiplier * random_factor) / 10000;\n    \n    // Verify sales constraints\n    let sales_valid = glasses_sold as u64 <= glasses_made as u64;\n    assert(sales_valid);\n    \n    // Verify demand constraints\n    let demand_valid = glasses_sold as u64 <= expected_demand as u64;\n    assert(demand_valid);\n    \n    // Calculate revenue and profit\n    let revenue = glasses_sold * price;\n    let profit = revenue - total_cost;\n    \n    // Verify final state matches calculations\n    assert(final_state.current_assets == previous_state.current_assets + profit);\n    assert(final_state.total_profit == previous_state.total_profit + profit);\n    assert(final_state.day_count == previous_state.day_count + 1);\n    assert(final_state.best_day_profit == if profit as u64 > previous_state.best_day_profit as u64 { \n        profit \n    } else { \n        previous_state.best_day_profit \n    });\n    assert(final_state.total_glasses_sold == previous_state.total_glasses_sold + glasses_sold);\n    \n    // Handle bankruptcy\n    if final_state.current_assets as u64 <= 0 {\n        assert(final_state.bankruptcy_count == previous_state.bankruptcy_count + 1);\n        assert(final_state.current_assets == STARTING_ASSETS); // Reset to starting amount\n    } else {\n        assert(final_state.bankruptcy_count == previous_state.bankruptcy_count);\n    }\n}\n\n#[test]\nfn test_daily_game() {\n    // Test initial state\n    let initial_state = GameState {\n        current_assets: 200,    // Starting with $2.00\n        total_profit: 0,\n        day_count: 0,\n        best_day_profit: 0,\n        total_glasses_sold: 0,\n        bankruptcy_count: 0\n    };\n    \n    // Expected final state after one day\n    let final_state = GameState {\n        current_assets: 250,    // $2.50\n        total_profit: 50,       // $0.50 profit\n        day_count: 1,\n        best_day_profit: 50,    // $0.50 best day\n        total_glasses_sold: 8,\n        bankruptcy_count: 0\n    };\n    \n    main(\n        initial_state,\n        final_state,\n        1,              // day number\n        10,             // glasses made\n        2,              // signs made\n        25,             // price (25 cents)\n        1,              // weather (SUNNY)\n        8,              // glasses sold\n        100             // random factor (1.0)\n    );\n}\n","path":"/Users/blockops/lemonade-zk/zk-proof/lemonade_proof/src/main.nr"}},"names":["main"],"brillig_names":["directive_integer_quotient","directive_invert"]}